<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SunnyWeather</title>
      <link href="/hexo_en/2022/10/28/sunnyweather/"/>
      <url>/hexo_en/2022/10/28/sunnyweather/</url>
      
        <content type="html"><![CDATA[<p>This android weather application is a android learning project followed by <em>Android: The first line of code</em>. The application is written in Kotlin and designed with MVVM architecture. It also applies material design and jetpack compose. In this application, you can search by city name, and the app will display the weather information to you. The following is the screenshots of the application. You can check the source code at <a href="https://github.com/Lucas-hao/SunnyWeather">Lucas-hao/SunnyWeather</a></p><table><tr><td><img src=https://raw.githubusercontent.com/Lucas-hao/Picgo-Picture/master/img/Screenshot_20221028_110923_lucashao.sunnyweather.android.jpg border=0></td><td><img src=https://raw.githubusercontent.com/Lucas-hao/Picgo-Picture/master/img/Screenshot_20221028_111549_lucashao.sunnyweather.android.jpg border=0></td><td><img src=https://raw.githubusercontent.com/Lucas-hao/Picgo-Picture/master/img/Screenshot_20221028_110944_lucashao.sunnyweather.android.jpg border=0></td></tr></table>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Project </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Space Adventure Game - OpenGL</title>
      <link href="/hexo_en/2022/10/27/space-adventure-game/"/>
      <url>/hexo_en/2022/10/27/space-adventure-game/</url>
      
        <content type="html"><![CDATA[<p>This game is implemented in OpenGL by myself from scratch. In this game, players can control the spacecraft to move around. There are three enemies wondering around to guard against others. When you are too near to them, they will change to the alarming mode and switch to the alarming texture. Here is a screenshot when you first enter the game.</p><p><img src="https://raw.githubusercontent.com/Lucas-hao/Picgo-Picture/master/img/image-20221027224054118.png" /></p><p>After crossing the enemies, you can see the planet with thousands of rocks orbiting around it. Our treasures are floating among the rocks. You need to collect these treasures by flying near them. After collecting the treasures, they will turn to normal rocks. When you successfully collected all the treasures, your spacecraft will turn gold, meaning you win the game in the end. The following image shows how it looks like.</p><p><img src="https://raw.githubusercontent.com/Lucas-hao/Picgo-Picture/master/img/image-20221027224108461.png" /></p><p>Moreover, there are a ui interface to adjust the parameters for cheating mode as well. Players can press the Tab key to change the mode. There are three modes. At first, you can move your mouse freely to click and drag on the ui buttons to change the parameters. With the first Tab, mouse movement can control the camera view rotation. You can use the keyboard to move around. With the second Tab, you are now in the game mode, where you cannot click on the UI interface but you can control the spacecraft now!</p><p>In the project, I implemented a bunch of features including normal mapping, skybox, instance rendering, Phong shading, UI interface, keyboard and mouse interaction and .etc.</p>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Project </tag>
            
            <tag> Game </tag>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Music Synthesizer Game in Supercollider</title>
      <link href="/hexo_en/2022/09/11/music-synthesizer-game-in-supercollider/"/>
      <url>/hexo_en/2022/09/11/music-synthesizer-game-in-supercollider/</url>
      
        <content type="html"><![CDATA[<p>A music synthesizer game made by my partner and I with Supercollider in our <em>Introduction to Computer Music</em> Course. All the features including the sound and GUI are completely implemented in Supercollider. The sound will play repeatedly as the timeline moves. We made three different main melodies and 16 individual short sound pieces. Players can click on the buttons to add the sound pieces to the music timeline or switch the main melody to simply produces their own songs. It is also possible to save your music creation to a file. The code is available in <a href="https://github.com/Lucas-hao/Supercollider-Music-Generation">Lucas-hao/Supercollider-Music-Generation</a>.</p><figure><img src="https://raw.githubusercontent.com/Lucas-hao/Picgo-Picture/master/img/image-20220911191106140.png" alt="Music Synthesizer Game" /><figcaption aria-hidden="true">Music Synthesizer Game</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Music </tag>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ray tracing renderer</title>
      <link href="/hexo_en/2022/09/11/ray-tracing-renderer/"/>
      <url>/hexo_en/2022/09/11/ray-tracing-renderer/</url>
      
        <content type="html"><![CDATA[<p>In this project, I implemented two ray tracing renderers including witted-style ray tracing and Monte Carlo path tracing. This project is based on the open course <a href="https://sites.cs.ucsb.edu/~lingqi/teaching/games101.html">GAMES101</a> assignments. Here are the source code repository <a href="https://github.com/Lucas-hao/Games101-Renderer">Lucas-hao/Games101-Renderer: Games101 Assignment 5 and Assignmen</a></p><p>In witted-style ray tracing, I completed the Moller Trumbore Algorithm for ray-triangle intersection and the witted-style ray tracing algorithm. The following figure is the rendering result.</p><p><img src="https://raw.githubusercontent.com/Lucas-hao/Picgo-Picture/master/img/output.jpg" /></p><p>In the path tracing renderer, I implemented the BVH algorithm to accelerate the rendering. Path tracing applied the physical based material to achieve a more realistic effect. I implemented the path tracing algorithm with Monte Carlo Integration. The following figure is the path tracing rendering output picture.</p><figure><img src="https://raw.githubusercontent.com/Lucas-hao/Picgo-Picture/master/img/output-128.jpg" alt="Path Tracing" /><figcaption aria-hidden="true">Path Tracing</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Project </tag>
            
            <tag> Rendering </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>World Generation Adventure Game</title>
      <link href="/hexo_en/2022/09/11/world-generation-game/"/>
      <url>/hexo_en/2022/09/11/world-generation-game/</url>
      
        <content type="html"><![CDATA[<p>In this game, players need to give a seed to initialize a world. The world is randomly generated with the seed and the world should be the same if given the same seed. In the world, there are some rooms and some hallways connecting the rooms. The algorithm I used for the connection is A*. There are also lightings and doors in the rooms or the hallways. Player is trapped in the dungeon and he needs to escape from it. At first, it was dark, and player can only see the environment around him. By turning on the lights, the tiles around the lights will be visible. Players need to turn on all the lights to light up the world and find the key to the exit lock door and get out of the room. Only when all the lights are turned on and the key is found can player escaped. The time is limited, player only have 5 minutes to escape. The code is in the github repository <a href="https://github.com/Lucas-hao/World-Generation-Game">Lucas-hao/World-Generation-Game</a>. The following video is a simple demo of the project.</p><p><img src="https://raw.githubusercontent.com/Lucas-hao/Picgo-Picture/master/img/image-20221115104141671.png" /></p><iframe src="https://www.youtube.com/embed/Z95YpaLSw_o?autoplay=1&amp;mute=1"></iframe>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Project </tag>
            
            <tag> Game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My first English blog</title>
      <link href="/hexo_en/2022/09/11/a-first-blog/"/>
      <url>/hexo_en/2022/09/11/a-first-blog/</url>
      
        <content type="html"><![CDATA[<p>This is my first English blog post. I would like to share with you my works and learning experiences in this website in the future.</p><p>I am excited about computer graphcis and game making. Besides, I am also a fan of Janpanese animes. You can know more about me in <strong><a href="https://lucas-hao.github.io/hexo_en/about/">ABOUT ME</a></strong>. You can also find contact information there.</p><p>Here is some projects I have done in class or during my spare time <strong><a href="https://lucas-hao.github.io/hexo_en/portfolio/">PORTFOLIO</a></strong>.</p><p>Thank you for visiting my website!</p>]]></content>
      
      
      
        <tags>
            
            <tag> Personal </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
